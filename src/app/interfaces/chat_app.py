#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/chat_app.py
    streamlit run src/app/chat_app.py
"""

import json

import streamlit as st
import plotly.graph_objects as go  # –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

from src.app.adapters import FinamAPIClient
from src.app.core import call_llm, get_settings


def create_system_prompt() -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    return """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å Finam TradeAPI.

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ä—ã–Ω–∫–µ, –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–ª–∏ —Ö–æ—á–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã–π API endpoint
2. –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: API_REQUEST: METHOD /path
3. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ –¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:
- GET /v1/instruments/{symbol}/quotes/latest - –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- GET /v1/instruments/{symbol}/orderbook - —Å—Ç–∞–∫–∞–Ω
- GET /v1/instruments/{symbol}/bars - —Å–≤–µ—á–∏
- GET /v1/accounts/{account_id} - —Å—á–µ—Ç –∏ –ø–æ–∑–∏—Ü–∏–∏
- GET /v1/accounts/{account_id}/orders - –æ—Ä–¥–µ—Ä–∞
- POST /v1/accounts/{account_id}/orders - —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
- DELETE /v1/accounts/{account_id}/orders/{order_id} - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""


def extract_api_request(text: str) -> tuple[str | None, str | None]:
    """–ò–∑–≤–ª–µ—á—å API –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
    if "API_REQUEST:" not in text:
        return None, None

    lines = text.split("\n")
    for line in lines:
        if line.strip().startswith("API_REQUEST:"):
            request = line.replace("API_REQUEST:", "").strip()
            parts = request.split(maxsplit=1)
            if len(parts) == 2:
                return parts[0], parts[1]
    return None, None


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI")

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")

        # Finam API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üîë Finam API", expanded=False):
            api_token = st.text_input(
                "Access Token",
                type="password",
                help="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Finam TradeAPI (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FINAM_ACCESS_TOKEN)",
            )
            api_base_url = st.text_input("API Base URL", value="https://api.finam.ru", help="–ë–∞–∑–æ–≤—ã–π URL API")

        account_id = st.text_input("ID —Å—á–µ—Ç–∞", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.rerun()

        st.markdown("---")
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
        - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
        - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
        - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
        - –î–µ—Ç–∞–ª–∏ –º–æ–µ–π —Å–µ—Å—Å–∏–∏
        """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Finam API –∫–ª–∏–µ–Ω—Ç–∞
    finam_client = FinamAPIClient(access_token=api_token or None, base_url=api_base_url if api_base_url else None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not finam_client.access_token:
        st.sidebar.warning(
            "‚ö†Ô∏è Finam API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_ACCESS_TOKEN –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—à–µ."
        )
    else:
        st.sidebar.success("‚úÖ Finam API —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            if "api_request" in message:
                with st.expander("üîç API –∑–∞–ø—Ä–æ—Å"):
                    st.code(f"{message['api_request']['method']} {message['api_request']['path']}", language="http")
                    st.json(message["api_request"]["response"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
        conversation_history = [{"role": "system", "content": create_system_prompt()}]
        for msg in st.session_state.messages:
            conversation_history.append({"role": msg["role"], "content": msg["content"]})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                response = call_llm(conversation_history, temperature=0.3)
                assistant_message = response["choices"][0]["message"]["content"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–∞–ø—Ä–æ—Å
                method, path = extract_api_request(assistant_message)

                api_data = None
                execute_api = True
                if method and path:
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º account_id –µ—Å–ª–∏ –µ—Å—Ç—å
                    if account_id and "{account_id}" in path:  # noqa: RUF027
                        path = path.replace("{account_id}", account_id)

                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è POST/DELETE
                    if method in ["POST", "DELETE"]:
                        confirm = st.text_input(f"[–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨] –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ {method} {path} (–¥–∞/–Ω–µ—Ç):")
                        if confirm.lower() != "–¥–∞":
                            st.warning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                            execute_api = False

                    if execute_api:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        st.info(f"üîç –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: `{method} {path}`")

                        # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å
                        api_response = finam_client.execute_request(method, path)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                        if "error" in api_response:
                            st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {api_response.get('error')}")
                            if "details" in api_response:
                                st.error(f"–î–µ—Ç–∞–ª–∏: {api_response['details']}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        with st.expander("üì° –û—Ç–≤–µ—Ç API", expanded=False):
                            st.json(api_response)

                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –ï—Å–ª–∏ bars, –ø–æ–∫–∞–∂–∏ candlestick
                        if "bars" in path and isinstance(api_response, list):
                            fig = go.Figure(data=[go.Candlestick(
                                x=[bar['time'] for bar in api_response],
                                open=[bar['open'] for bar in api_response],
                                high=[bar['high'] for bar in api_response],
                                low=[bar['low'] for bar in api_response],
                                close=[bar['close'] for bar in api_response]
                            )])
                            st.plotly_chart(fig, use_container_width=True)

                        # –ö–µ–π—Å 1: –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ/—Å—á–µ—Ç–µ)
                        if "accounts" in path and "positions" in str(api_response).lower():
                            # –ü—Ä–∏–º–µ—Ä sunburst –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è (—Å–µ–∫—Ç–æ—Ä–∞)
                            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: —Å–µ–∫—Ç–æ—Ä–∞ –∏ –≤–µ—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ api_response['positions'])
                            sectors = ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–§–∏–Ω–∞–Ω—Å—ã", "–≠–Ω–µ—Ä–≥–∏—è", "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å"]
                            weights = [0.4, 0.3, 0.2, 0.1]  # –ò–∑ –ø–æ–∑–∏—Ü–∏–π
                            fig_sunburst = go.Figure(go.Sunburst(
                                labels=sectors,
                                parents=[""] * len(sectors),
                                values=weights,
                                branchvalues="total"
                            ))
                            st.plotly_chart(fig_sunburst, use_container_width=True)
                            st.caption("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º")

                        # –ö–µ–π—Å 2: –†—ã–Ω–æ—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–± –∞–∫—Ç–∏–≤–∞—Ö/—Ñ–∏–ª—å—Ç—Ä–µ)
                        if "assets" in path:
                            # –¢–∞–±–ª–∏—Ü–∞ —Å sparklines (–º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏)
                            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: —Ç–∏–∫–µ—Ä—ã, —Ä–æ—Å—Ç, —Å–ø–∞—Ä–∫–ª–∞–π–Ω (–∏–∑ GetBars)
                            tickers = ["SBER", "GAZP", "YDEX"]
                            growth = [5.2, -1.3, 3.8]  # % –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            # Sparklines: –ø—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞—Ä–æ–≤)
                            fig_spark = go.Figure()
                            for i, g in enumerate(growth):
                                fig_spark.add_trace(go.Scatter(y=[0, g], mode='lines', name=tickers[i]))
                            fig_spark.update_layout(showlegend=False, height=50)
                            st.plotly_chart(fig_spark, use_container_width=True)
                            st.dataframe({"–¢–∏–∫–µ—Ä": tickers, "–†–æ—Å—Ç %": growth})

                        # –ö–µ–π—Å 3: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –±–∞—Ä–∞—Ö)
                        if "bars" in path and len(api_response) > 1:
                            # –ì—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫ + –∫—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                            times = [bar['time'] for bar in api_response]
                            closes = [bar['close'] for bar in api_response]
                            fig_backtest = go.Figure()
                            fig_backtest.add_trace(go.Scatter(x=times, y=closes, mode='lines', name='–¶–µ–Ω–∞'))
                            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
                            entries = [times[0], times[-1]]  # –ü—Ä–∏–º–µ—Ä
                            fig_backtest.add_trace(go.Scatter(x=entries, y=[closes[0], closes[-1]], mode='markers', name='–°–¥–µ–ª–∫–∏'))
                            # –ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è)
                            returns = [ (closes[i] - closes[0]) / closes[0] for i in range(len(closes)) ]
                            fig_backtest.add_trace(go.Scatter(x=times, y=returns, yaxis='y2', name='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'))
                            fig_backtest.update_layout(yaxis2=dict(overlaying='y', side='right'))
                            st.plotly_chart(fig_backtest, use_container_width=True)

                        api_data = {"method": method, "path": path, "response": api_response}

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        conversation_history.append({"role": "assistant", "content": assistant_message})
                        conversation_history.append({
                            "role": "user",
                            "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.",
                        })

                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                        response = call_llm(conversation_history, temperature=0.3)
                        assistant_message = response["choices"][0]["message"]["content"]

                st.markdown(assistant_message)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                message_data = {"role": "assistant", "content": assistant_message}
                if api_data:
                    message_data["api_request"] = api_data
                st.session_state.messages.append(message_data)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/chat_app.py
    streamlit run src/app/chat_app.py
"""

import json

import streamlit as st
import plotly.graph_objects as go  # –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

from src.app.adapters import FinamAPIClient
from src.app.core import call_llm, get_settings


def create_system_prompt() -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    return """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å Finam TradeAPI.

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ä—ã–Ω–∫–µ, –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–ª–∏ —Ö–æ—á–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã–π API endpoint
2. –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: API_REQUEST: METHOD /path
3. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ –¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:
- GET /v1/instruments/{symbol}/quotes/latest - –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- GET /v1/instruments/{symbol}/orderbook - —Å—Ç–∞–∫–∞–Ω
- GET /v1/instruments/{symbol}/bars - —Å–≤–µ—á–∏
- GET /v1/accounts/{account_id} - —Å—á–µ—Ç –∏ –ø–æ–∑–∏—Ü–∏–∏
- GET /v1/accounts/{account_id}/orders - –æ—Ä–¥–µ—Ä–∞
- POST /v1/accounts/{account_id}/orders - —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
- DELETE /v1/accounts/{account_id}/orders/{order_id} - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""


def extract_api_request(text: str) -> tuple[str | None, str | None]:
    """–ò–∑–≤–ª–µ—á—å API –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
    if "API_REQUEST:" not in text:
        return None, None

    lines = text.split("\n")
    for line in lines:
        if line.strip().startswith("API_REQUEST:"):
            request = line.replace("API_REQUEST:", "").strip()
            parts = request.split(maxsplit=1)
            if len(parts) == 2:
                return parts[0], parts[1]
    return None, None


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI")

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")

        # Finam API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üîë Finam API", expanded=False):
            api_token = st.text_input(
                "Access Token",
                type="password",
                help="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Finam TradeAPI (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FINAM_ACCESS_TOKEN)",
            )
            api_base_url = st.text_input("API Base URL", value="https://api.finam.ru", help="–ë–∞–∑–æ–≤—ã–π URL API")

        account_id = st.text_input("ID —Å—á–µ—Ç–∞", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.rerun()

        st.markdown("---")
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
        - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
        - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
        - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
        - –î–µ—Ç–∞–ª–∏ –º–æ–µ–π —Å–µ—Å—Å–∏–∏
        """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Finam API –∫–ª–∏–µ–Ω—Ç–∞
    finam_client = FinamAPIClient(access_token=api_token or None, base_url=api_base_url if api_base_url else None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not finam_client.access_token:
        st.sidebar.warning(
            "‚ö†Ô∏è Finam API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_ACCESS_TOKEN –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—à–µ."
        )
    else:
        st.sidebar.success("‚úÖ Finam API —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            if "api_request" in message:
                with st.expander("üîç API –∑–∞–ø—Ä–æ—Å"):
                    st.code(f"{message['api_request']['method']} {message['api_request']['path']}", language="http")
                    st.json(message["api_request"]["response"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
        conversation_history = [{"role": "system", "content": create_system_prompt()}]
        for msg in st.session_state.messages:
            conversation_history.append({"role": msg["role"], "content": msg["content"]})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                response = call_llm(conversation_history, temperature=0.3)
                assistant_message = response["choices"][0]["message"]["content"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–∞–ø—Ä–æ—Å
                method, path = extract_api_request(assistant_message)

                api_data = None
                execute_api = True
                if method and path:
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º account_id –µ—Å–ª–∏ –µ—Å—Ç—å
                    if account_id and "{account_id}" in path:  # noqa: RUF027
                        path = path.replace("{account_id}", account_id)

                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è POST/DELETE
                    if method in ["POST", "DELETE"]:
                        confirm = st.text_input(f"[–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨] –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ {method} {path} (–¥–∞/–Ω–µ—Ç):")
                        if confirm.lower() != "–¥–∞":
                            st.warning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                            execute_api = False

                    if execute_api:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        st.info(f"üîç –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: `{method} {path}`")

                        # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å
                        api_response = finam_client.execute_request(method, path)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                        if "error" in api_response:
                            st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {api_response.get('error')}")
                            if "details" in api_response:
                                st.error(f"–î–µ—Ç–∞–ª–∏: {api_response['details']}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        with st.expander("üì° –û—Ç–≤–µ—Ç API", expanded=False):
                            st.json(api_response)

                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –ï—Å–ª–∏ bars, –ø–æ–∫–∞–∂–∏ candlestick
                        if "bars" in path and isinstance(api_response, list):
                            fig = go.Figure(data=[go.Candlestick(
                                x=[bar['time'] for bar in api_response],
                                open=[bar['open'] for bar in api_response],
                                high=[bar['high'] for bar in api_response],
                                low=[bar['low'] for bar in api_response],
                                close=[bar['close'] for bar in api_response]
                            )])
                            st.plotly_chart(fig, use_container_width=True)

                        # –ö–µ–π—Å 1: –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ/—Å—á–µ—Ç–µ)
                        if "accounts" in path and "positions" in str(api_response).lower():
                            # –ü—Ä–∏–º–µ—Ä sunburst –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è (—Å–µ–∫—Ç–æ—Ä–∞)
                            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: —Å–µ–∫—Ç–æ—Ä–∞ –∏ –≤–µ—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ api_response['positions'])
                            sectors = ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–§–∏–Ω–∞–Ω—Å—ã", "–≠–Ω–µ—Ä–≥–∏—è", "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å"]
                            weights = [0.4, 0.3, 0.2, 0.1]  # –ò–∑ –ø–æ–∑–∏—Ü–∏–π
                            fig_sunburst = go.Figure(go.Sunburst(
                                labels=sectors,
                                parents=[""] * len(sectors),
                                values=weights,
                                branchvalues="total"
                            ))
                            st.plotly_chart(fig_sunburst, use_container_width=True)
                            st.caption("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º")

                        # –ö–µ–π—Å 2: –†—ã–Ω–æ—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–± –∞–∫—Ç–∏–≤–∞—Ö/—Ñ–∏–ª—å—Ç—Ä–µ)
                        if "assets" in path:
                            # –¢–∞–±–ª–∏—Ü–∞ —Å sparklines (–º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏)
                            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: —Ç–∏–∫–µ—Ä—ã, —Ä–æ—Å—Ç, —Å–ø–∞—Ä–∫–ª–∞–π–Ω (–∏–∑ GetBars)
                            tickers = ["SBER", "GAZP", "YDEX"]
                            growth = [5.2, -1.3, 3.8]  # % –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            # Sparklines: –ø—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞—Ä–æ–≤)
                            fig_spark = go.Figure()
                            for i, g in enumerate(growth):
                                fig_spark.add_trace(go.Scatter(y=[0, g], mode='lines', name=tickers[i]))
                            fig_spark.update_layout(showlegend=False, height=50)
                            st.plotly_chart(fig_spark, use_container_width=True)
                            st.dataframe({"–¢–∏–∫–µ—Ä": tickers, "–†–æ—Å—Ç %": growth})

                        # –ö–µ–π—Å 3: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –±–∞—Ä–∞—Ö)
                        if "bars" in path and len(api_response) > 1:
                            # –ì—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫ + –∫—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                            times = [bar['time'] for bar in api_response]
                            closes = [bar['close'] for bar in api_response]
                            fig_backtest = go.Figure()
                            fig_backtest.add_trace(go.Scatter(x=times, y=closes, mode='lines', name='–¶–µ–Ω–∞'))
                            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
                            entries = [times[0], times[-1]]  # –ü—Ä–∏–º–µ—Ä
                            fig_backtest.add_trace(go.Scatter(x=entries, y=[closes[0], closes[-1]], mode='markers', name='–°–¥–µ–ª–∫–∏'))
                            # –ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è)
                            returns = [ (closes[i] - closes[0]) / closes[0] for i in range(len(closes)) ]
                            fig_backtest.add_trace(go.Scatter(x=times, y=returns, yaxis='y2', name='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'))
                            fig_backtest.update_layout(yaxis2=dict(overlaying='y', side='right'))
                            st.plotly_chart(fig_backtest, use_container_width=True)

                        api_data = {"method": method, "path": path, "response": api_response}

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        conversation_history.append({"role": "assistant", "content": assistant_message})
                        conversation_history.append({
                            "role": "user",
                            "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.",
                        })

                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                        response = call_llm(conversation_history, temperature=0.3)
                        assistant_message = response["choices"][0]["message"]["content"]

                st.markdown(assistant_message)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                message_data = {"role": "assistant", "content": assistant_message}
                if api_data:
                    message_data["api_request"] = api_data
                st.session_state.messages.append(message_data)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
