#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ submission.csv –Ω–∞ –æ—Å–Ω–æ–≤–µ test.csv

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
–≤ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Finam TradeAPI.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/generate_submission.py [OPTIONS]

–û–ø—Ü–∏–∏:
    --test-file PATH      –ü—É—Ç—å –∫ test.csv (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/processed/test.csv)
    --train-file PATH     –ü—É—Ç—å –∫ train.csv (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/processed/train.csv)
    --output-file PATH    –ü—É—Ç—å –∫ submission.csv (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/processed/submission.csv)
    --num-examples INT    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è few-shot (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)
    --batch-size INT      –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)
"""

import csv
import random
from pathlib import Path

import click
from tqdm import tqdm  # type: ignore[import-untyped]

from src.app.core.llm import call_llm


def calculate_cost(usage: dict, model: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ usage –∏ –º–æ–¥–µ–ª–∏"""
    # –¶–µ–Ω—ã OpenRouter (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ, –≤ $ –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
    # –ò—Å—Ç–æ—á–Ω–∏–∫: https://openrouter.ai/models
    pricing = {
        "openai/gpt-4o-mini": {"prompt": 0.15, "completion": 0.60},
        "openai/gpt-4o": {"prompt": 2.50, "completion": 10.00},
        "openai/gpt-3.5-turbo": {"prompt": 0.50, "completion": 1.50},
        "anthropic/claude-3-sonnet": {"prompt": 3.00, "completion": 15.00},
        "anthropic/claude-3-haiku": {"prompt": 0.25, "completion": 1.25},
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –¥–ª—è gpt-4o-mini)
    prices = pricing.get(model, {"prompt": 0.15, "completion": 0.60})

    prompt_tokens = usage.get("prompt_tokens", 0)
    completion_tokens = usage.get("completion_tokens", 0)

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
    prompt_cost = (prompt_tokens / 1_000_000) * prices["prompt"]
    completion_cost = (completion_tokens / 1_000_000) * prices["completion"]

    return prompt_cost + completion_cost


def load_train_examples(train_file: Path, num_examples: int = 10) -> list[dict[str, str]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ train.csv –¥–ª—è few-shot learning"""
    examples = []
    with open(train_file, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            examples.append({"question": row["question"], "type": row["type"], "request": row["request"]})

    # –ë–µ—Ä–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (GET, POST, DELETE)
    get_examples = [e for e in examples if e["type"] == "GET"]
    post_examples = [e for e in examples if e["type"] == "POST"]
    delete_examples = [e for e in examples if e["type"] == "DELETE"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
    selected = []
    selected.extend(random.sample(get_examples, min(num_examples - 3, len(get_examples))))
    selected.extend(random.sample(post_examples, min(2, len(post_examples))))
    selected.extend(random.sample(delete_examples, min(1, len(delete_examples))))

    return selected[:num_examples]


def create_prompt(question: str, examples: list[dict[str, str]]) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM —Å few-shot –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Finam TradeAPI. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ HTTP –∑–∞–ø—Ä–æ—Å –∫ API.

API Documentation:
- GET /v1/exchanges - —Å–ø–∏—Å–æ–∫ –±–∏—Ä–∂
- GET /v1/assets - –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- GET /v1/assets/{symbol} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
- GET /v1/assets/{symbol}/params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å—á–µ—Ç–∞
- GET /v1/assets/{symbol}/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤
- GET /v1/assets/{symbol}/options - –æ–ø—Ü–∏–æ–Ω—ã –Ω–∞ –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
- GET /v1/instruments/{symbol}/quotes/latest - –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- GET /v1/instruments/{symbol}/orderbook - –±–∏—Ä–∂–µ–≤–æ–π —Å—Ç–∞–∫–∞–Ω
- GET /v1/instruments/{symbol}/trades/latest - –ª–µ–Ω—Ç–∞ —Å–¥–µ–ª–æ–∫
- GET /v1/instruments/{symbol}/bars - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏
  (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: timeframe, interval.start_time, interval.end_time)
- GET /v1/accounts/{account_id} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
- GET /v1/accounts/{account_id}/orders - —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
- GET /v1/accounts/{account_id}/orders/{order_id} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
- GET /v1/accounts/{account_id}/trades - –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
- GET /v1/accounts/{account_id}/transactions - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—á–µ—Ç—É
- POST /v1/sessions - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
- POST /v1/sessions/details - –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
- POST /v1/accounts/{account_id}/orders - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
- DELETE /v1/accounts/{account_id}/orders/{order_id} - –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞

Timeframes: TIME_FRAME_M1, TIME_FRAME_M5, TIME_FRAME_M15, TIME_FRAME_M30,
TIME_FRAME_H1, TIME_FRAME_H4, TIME_FRAME_D, TIME_FRAME_W, TIME_FRAME_MN

–ü—Ä–∏–º–µ—Ä—ã:

"""

    for ex in examples:
        prompt += f'–í–æ–ø—Ä–æ—Å: "{ex["question"]}"\n'
        prompt += f"–û—Ç–≤–µ—Ç: {ex['type']} {ex['request']}\n\n"

    prompt += f'–í–æ–ø—Ä–æ—Å: "{question}"\n'
    prompt += "–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ HTTP –º–µ—Ç–æ–¥ –∏ –ø—É—Ç—å, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π):"

    return prompt


def parse_llm_response(response: str) -> tuple[str, str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM –≤ (type, request)"""
    response = response.strip()
    import json  # –î–ª—è structured output
    try:
        parsed = json.loads(response)
        return parsed.get("type", "GET"), parsed.get("request", "/v1/assets")
    except json.JSONDecodeError:
        pass  # Fallback to original parsing

    # –ò—â–µ–º HTTP –º–µ—Ç–æ–¥ –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–¥ –ø—É—Ç–µ–º
    methods = ["GET", "POST", "DELETE", "PUT", "PATCH"]
    method = "GET"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    request = response

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ –∏ –ø—É—Ç—å
    import re
    pattern = r'\b(GET|POST|DELETE|PUT|PATCH)\s*/'
    match = re.search(pattern, response, re.IGNORECASE)
    if match:
        method = match.group(1).upper()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ –º–µ—Ç–æ–¥–∞
        start = match.end()
        request = response[start:].strip()
    else:
        # Fallback: –∏—â–µ–º –ø—É—Ç—å
        path_match = re.search(r'/\S+', response)
        if path_match:
            request = path_match.group(0)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    request = request.strip()
    if not request.startswith("/"):
        request = f"/{request}"

    # Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if not request.startswith("/v1/"):
        request = "/v1/assets"

    return method, request


def generate_api_call(question: str, examples: list[dict[str, str]], model: str) -> tuple[dict[str, str], float]:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞

    Returns:
        tuple: (result_dict, cost_in_dollars)
    """
    prompt = create_prompt(question, examples)

    messages = [{"role": "user", "content": prompt}]

    try:
        response = call_llm(messages, temperature=0.0, max_tokens=200)
        llm_answer = response["choices"][0]["message"]["content"].strip()

        method, request = parse_llm_response(llm_answer)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        usage = response.get("usage", {})
        cost = calculate_cost(usage, model)

        return {"type": method, "request": request}, cost

    except Exception as e:
        click.echo(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question[:50]}...': {e}", err=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        return {"type": "GET", "request": "/v1/assets"}, 0.0


@click.command()
@click.option(
    "--test-file",
    type=click.Path(exists=True, path_type=Path),
    default="data/processed/test.csv",
    help="–ü—É—Ç—å –∫ test.csv",
)
@click.option(
    "--train-file",
    type=click.Path(exists=True, path_type=Path),
    default="data/processed/train.csv",
    help="–ü—É—Ç—å –∫ train.csv",
)
@click.option(
    "--output-file",
    type=click.Path(path_type=Path),
    default="data/processed/submission.csv",
    help="–ü—É—Ç—å –∫ submission.csv",
)
@click.option("--num-examples", type=int, default=20, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è few-shot")  # Increase for accuracy
def main(test_file: Path, train_file: Path, output_file: Path, num_examples: int) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission.csv –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞"""
    from src.app.core.config import get_settings

    click.echo("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission —Ñ–∞–π–ª–∞...")
    click.echo(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ {train_file}...")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    settings = get_settings()
    model = settings.openrouter_model

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è few-shot
    examples = load_train_examples(train_file, num_examples)
    click.echo(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è few-shot learning")
    click.echo(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model}")

    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    click.echo(f"üìñ –ß—Ç–µ–Ω–∏–µ {test_file}...")
    test_questions = []
    with open(test_file, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            test_questions.append({"uid": row["uid"], "question": row["question"]})

    click.echo(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
    click.echo("\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM...")
    results = []
    total_cost = 0.0

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º tqdm —Å postfix –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    progress_bar = tqdm(test_questions, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞")
    for item in progress_bar:
        api_call, cost = generate_api_call(item["question"], examples, model)
        total_cost += cost
        results.append({"uid": item["uid"], "type": api_call["type"], "request": api_call["request"]})

        # –û–±–Ω–æ–≤–ª—è–µ–º postfix —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        progress_bar.set_postfix({"cost": f"${total_cost:.4f}"})

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ submission.csv
    click.echo(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {output_file}...")
    output_file.parent.mkdir(parents=True, exist_ok=True)

    with open(output_file, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["uid", "type", "request"], delimiter=";")
        writer.writeheader()
        writer.writerows(results)

    click.echo(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ {output_file}")
    click.echo(f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${total_cost:.4f}")
    click.echo(f"   –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${total_cost / len(results):.6f}")
    click.echo("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:")
    type_counts: dict[str, int] = {}
    for r in results:
        type_counts[r["type"]] = type_counts.get(r["type"], 0) + 1
    for method, count in sorted(type_counts.items()):
        click.echo(f"  {method}: {count}")


if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ submission.csv –Ω–∞ –æ—Å–Ω–æ–≤–µ test.csv

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
–≤ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Finam TradeAPI.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/generate_submission.py [OPTIONS]

–û–ø—Ü–∏–∏:
    --test-file PATH      –ü—É—Ç—å –∫ test.csv (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/processed/test.csv)
    --train-file PATH     –ü—É—Ç—å –∫ train.csv (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/processed/train.csv)
    --output-file PATH    –ü—É—Ç—å –∫ submission.csv (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/processed/submission.csv)
    --num-examples INT    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è few-shot (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)
    --batch-size INT      –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)
"""

import csv
import random
from pathlib import Path

import click
from tqdm import tqdm  # type: ignore[import-untyped]

from src.app.core.llm import call_llm


def calculate_cost(usage: dict, model: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ usage –∏ –º–æ–¥–µ–ª–∏"""
    # –¶–µ–Ω—ã OpenRouter (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ, –≤ $ –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
    # –ò—Å—Ç–æ—á–Ω–∏–∫: https://openrouter.ai/models
    pricing = {
        "openai/gpt-4o-mini": {"prompt": 0.15, "completion": 0.60},
        "openai/gpt-4o": {"prompt": 2.50, "completion": 10.00},
        "openai/gpt-3.5-turbo": {"prompt": 0.50, "completion": 1.50},
        "anthropic/claude-3-sonnet": {"prompt": 3.00, "completion": 15.00},
        "anthropic/claude-3-haiku": {"prompt": 0.25, "completion": 1.25},
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –¥–ª—è gpt-4o-mini)
    prices = pricing.get(model, {"prompt": 0.15, "completion": 0.60})

    prompt_tokens = usage.get("prompt_tokens", 0)
    completion_tokens = usage.get("completion_tokens", 0)

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
    prompt_cost = (prompt_tokens / 1_000_000) * prices["prompt"]
    completion_cost = (completion_tokens / 1_000_000) * prices["completion"]

    return prompt_cost + completion_cost


def load_train_examples(train_file: Path, num_examples: int = 10) -> list[dict[str, str]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ train.csv –¥–ª—è few-shot learning"""
    examples = []
    with open(train_file, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            examples.append({"question": row["question"], "type": row["type"], "request": row["request"]})

    # –ë–µ—Ä–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (GET, POST, DELETE)
    get_examples = [e for e in examples if e["type"] == "GET"]
    post_examples = [e for e in examples if e["type"] == "POST"]
    delete_examples = [e for e in examples if e["type"] == "DELETE"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
    selected = []
    selected.extend(random.sample(get_examples, min(num_examples - 3, len(get_examples))))
    selected.extend(random.sample(post_examples, min(2, len(post_examples))))
    selected.extend(random.sample(delete_examples, min(1, len(delete_examples))))

    return selected[:num_examples]


def create_prompt(question: str, examples: list[dict[str, str]]) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM —Å few-shot –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Finam TradeAPI. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ HTTP –∑–∞–ø—Ä–æ—Å –∫ API.

API Documentation:
- GET /v1/exchanges - —Å–ø–∏—Å–æ–∫ –±–∏—Ä–∂
- GET /v1/assets - –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- GET /v1/assets/{symbol} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
- GET /v1/assets/{symbol}/params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å—á–µ—Ç–∞
- GET /v1/assets/{symbol}/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤
- GET /v1/assets/{symbol}/options - –æ–ø—Ü–∏–æ–Ω—ã –Ω–∞ –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
- GET /v1/instruments/{symbol}/quotes/latest - –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- GET /v1/instruments/{symbol}/orderbook - –±–∏—Ä–∂–µ–≤–æ–π —Å—Ç–∞–∫–∞–Ω
- GET /v1/instruments/{symbol}/trades/latest - –ª–µ–Ω—Ç–∞ —Å–¥–µ–ª–æ–∫
- GET /v1/instruments/{symbol}/bars - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏
  (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: timeframe, interval.start_time, interval.end_time)
- GET /v1/accounts/{account_id} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
- GET /v1/accounts/{account_id}/orders - —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
- GET /v1/accounts/{account_id}/orders/{order_id} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
- GET /v1/accounts/{account_id}/trades - –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
- GET /v1/accounts/{account_id}/transactions - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—á–µ—Ç—É
- POST /v1/sessions - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
- POST /v1/sessions/details - –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
- POST /v1/accounts/{account_id}/orders - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
- DELETE /v1/accounts/{account_id}/orders/{order_id} - –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞

Timeframes: TIME_FRAME_M1, TIME_FRAME_M5, TIME_FRAME_M15, TIME_FRAME_M30,
TIME_FRAME_H1, TIME_FRAME_H4, TIME_FRAME_D, TIME_FRAME_W, TIME_FRAME_MN

–ü—Ä–∏–º–µ—Ä—ã:

"""

    for ex in examples:
        prompt += f'–í–æ–ø—Ä–æ—Å: "{ex["question"]}"\n'
        prompt += f"–û—Ç–≤–µ—Ç: {ex['type']} {ex['request']}\n\n"

    prompt += f'–í–æ–ø—Ä–æ—Å: "{question}"\n'
    prompt += "–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ HTTP –º–µ—Ç–æ–¥ –∏ –ø—É—Ç—å, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π):"

    return prompt


def parse_llm_response(response: str) -> tuple[str, str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM –≤ (type, request)"""
    response = response.strip()
    import json  # –î–ª—è structured output
    try:
        parsed = json.loads(response)
        return parsed.get("type", "GET"), parsed.get("request", "/v1/assets")
    except json.JSONDecodeError:
        pass  # Fallback to original parsing

    # –ò—â–µ–º HTTP –º–µ—Ç–æ–¥ –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–¥ –ø—É—Ç–µ–º
    methods = ["GET", "POST", "DELETE", "PUT", "PATCH"]
    method = "GET"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    request = response

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ –∏ –ø—É—Ç—å
    import re
    pattern = r'\b(GET|POST|DELETE|PUT|PATCH)\s*/'
    match = re.search(pattern, response, re.IGNORECASE)
    if match:
        method = match.group(1).upper()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ –º–µ—Ç–æ–¥–∞
        start = match.end()
        request = response[start:].strip()
    else:
        # Fallback: –∏—â–µ–º –ø—É—Ç—å
        path_match = re.search(r'/\S+', response)
        if path_match:
            request = path_match.group(0)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    request = request.strip()
    if not request.startswith("/"):
        request = f"/{request}"

    # Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if not request.startswith("/v1/"):
        request = "/v1/assets"

    return method, request


def generate_api_call(question: str, examples: list[dict[str, str]], model: str) -> tuple[dict[str, str], float]:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞

    Returns:
        tuple: (result_dict, cost_in_dollars)
    """
    prompt = create_prompt(question, examples)

    messages = [{"role": "user", "content": prompt}]

    try:
        response = call_llm(messages, temperature=0.0, max_tokens=200)
        llm_answer = response["choices"][0]["message"]["content"].strip()

        method, request = parse_llm_response(llm_answer)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        usage = response.get("usage", {})
        cost = calculate_cost(usage, model)

        return {"type": method, "request": request}, cost

    except Exception as e:
        click.echo(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question[:50]}...': {e}", err=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        return {"type": "GET", "request": "/v1/assets"}, 0.0


@click.command()
@click.option(
    "--test-file",
    type=click.Path(exists=True, path_type=Path),
    default="data/processed/test.csv",
    help="–ü—É—Ç—å –∫ test.csv",
)
@click.option(
    "--train-file",
    type=click.Path(exists=True, path_type=Path),
    default="data/processed/train.csv",
    help="–ü—É—Ç—å –∫ train.csv",
)
@click.option(
    "--output-file",
    type=click.Path(path_type=Path),
    default="data/processed/submission.csv",
    help="–ü—É—Ç—å –∫ submission.csv",
)
@click.option("--num-examples", type=int, default=20, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è few-shot")  # Increase for accuracy
def main(test_file: Path, train_file: Path, output_file: Path, num_examples: int) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission.csv –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞"""
    from src.app.core.config import get_settings

    click.echo("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission —Ñ–∞–π–ª–∞...")
    click.echo(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ {train_file}...")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    settings = get_settings()
    model = settings.openrouter_model

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è few-shot
    examples = load_train_examples(train_file, num_examples)
    click.echo(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è few-shot learning")
    click.echo(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model}")

    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    click.echo(f"üìñ –ß—Ç–µ–Ω–∏–µ {test_file}...")
    test_questions = []
    with open(test_file, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            test_questions.append({"uid": row["uid"], "question": row["question"]})

    click.echo(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
    click.echo("\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM...")
    results = []
    total_cost = 0.0

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º tqdm —Å postfix –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    progress_bar = tqdm(test_questions, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞")
    for item in progress_bar:
        api_call, cost = generate_api_call(item["question"], examples, model)
        total_cost += cost
        results.append({"uid": item["uid"], "type": api_call["type"], "request": api_call["request"]})

        # –û–±–Ω–æ–≤–ª—è–µ–º postfix —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        progress_bar.set_postfix({"cost": f"${total_cost:.4f}"})

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ submission.csv
    click.echo(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {output_file}...")
    output_file.parent.mkdir(parents=True, exist_ok=True)

    with open(output_file, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["uid", "type", "request"], delimiter=";")
        writer.writeheader()
        writer.writerows(results)

    click.echo(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ {output_file}")
    click.echo(f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${total_cost:.4f}")
    click.echo(f"   –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${total_cost / len(results):.6f}")
    click.echo("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:")
    type_counts: dict[str, int] = {}
    for r in results:
        type_counts[r["type"]] = type_counts.get(r["type"], 0) + 1
    for method, count in sorted(type_counts.items()):
        click.echo(f"  {method}: {count}")


if __name__ == "__main__":
    main()
