#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫–∏ accuracy –¥–ª—è submission —Ñ–∞–π–ª–∞.

–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ evaluation.md:
    Accuracy = N_–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö_–∑–∞–ø—Ä–æ—Å–æ–≤ / N_–≤—Å–µ–≥–æ_–∑–∞–ø—Ä–æ—Å–æ–≤

–ó–∞–ø—Ä–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API
–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–ª —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º (–∏ type, –∏ request).

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/calculate_metrics.py --pred submission.csv --true train.csv
    python scripts/calculate_metrics.py  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

–ü—Ä–∏–º–µ—Ä—ã:
    # –ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è submission.csv
    poetry run calculate-metrics

    # –ü–æ–¥—Å—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    poetry run calculate-metrics --pred data/processed/submission.csv --true data/processed/train.csv

    # –° –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫
    poetry run calculate-metrics --show-errors 5
"""

import csv
import re
from pathlib import Path
from typing import Optional

import click


def normalize_api_request(request: str, method: str | None = None) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–∏–±–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    1. –£–±–∏—Ä–∞–µ—Ç HTTP –º–µ—Ç–æ–¥ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å)
    2. –ó–∞–º–µ–Ω—è–µ—Ç ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ "/accounts/" –Ω–∞ "<some_id>"

    Args:
        request: API –∑–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å HTTP –º–µ—Ç–æ–¥–∞ –∏–ª–∏ —Å—Ä–∞–∑—É —Å –ø—É—Ç–∏)
        method: HTTP –º–µ—Ç–æ–¥ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)

    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    """
    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ –Ω–∞—á–∞–ª–∞ request –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    if method and request.upper().startswith(method.upper()):
        request = request[len(method):].lstrip()

    # –£–±–∏—Ä–∞–µ–º HTTP –º–µ—Ç–æ–¥ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    # –ü–∞—Ç—Ç–µ—Ä–Ω: METHOD /path (–≥–¥–µ METHOD - —Å–ª–æ–≤–æ –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤)
    method_pattern = r"^(GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS)\s+"
    request = re.sub(method_pattern, "", request, flags=re.IGNORECASE).lstrip()

    # –ó–∞–º–µ–Ω—è–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    # –ü–∞—Ç—Ç–µ—Ä–Ω: /accounts/{–ª—é–±–æ–π_–∏–¥}/ –Ω–∞ /accounts/<some_id>/
    account_pattern = r"/accounts/[^/]+/"
    return re.sub(account_pattern, "/accounts/<some_id>/", request)


def load_csv(file_path: Path) -> dict[str, dict[str, str]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª –≤ —Å–ª–æ–≤–∞—Ä—å {uid: {type, request}}"""
    data = {}
    with open(file_path, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            uid = row["uid"]
            data[uid] = {"type": row["type"], "request": row["request"]}
    return data


def calculate_accuracy(
    predicted: dict[str, dict[str, str]], ground_truth: dict[str, dict[str, str]]
) -> tuple[float, dict]:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å accuracy –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    Returns:
        tuple: (accuracy, detailed_stats)
    """
    total = len(ground_truth)
    correct = 0
    correct_type = 0
    correct_request = 0

    errors = []
    type_stats = {
        "GET": {"tp": 0, "fp": 0, "fn": 0},
        "POST": {"tp": 0, "fp": 0, "fn": 0},
        "DELETE": {"tp": 0, "fp": 0, "fn": 0},
    }

    for uid, true_data in ground_truth.items():
        if uid not in predicted:
            errors.append({
                "uid": uid,
                "error": "missing",
                "true_type": true_data["type"],
                "true_request": true_data["request"],
                "pred_type": None,
                "pred_request": None,
            })
            type_stats[true_data["type"]]["fn"] += 1
            continue

        pred_data = predicted[uid]
        true_type = true_data["type"]
        pred_type = pred_data["type"]
        true_request = true_data["request"]
        pred_request = pred_data["request"]

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≥–∏–±–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        true_request_norm = normalize_api_request(true_request, true_type)
        pred_request_norm = normalize_api_request(pred_request, pred_type)

        type_match = true_type == pred_type
        request_match = true_request_norm == pred_request_norm

        if type_match:
            correct_type += 1

        if request_match:
            correct_request += 1

        if type_match and request_match:
            correct += 1
            type_stats[true_type]["tp"] += 1
        else:
            errors.append({
                "uid": uid,
                "error": "mismatch",
                "true_type": true_type,
                "true_request": true_request,
                "true_request_norm": true_request_norm,
                "pred_type": pred_type,
                "pred_request": pred_request,
                "pred_request_norm": pred_request_norm,
                "type_match": "yes" if type_match else "no",
                "request_match": "yes" if request_match else "no",
            })
            if not type_match:
                type_stats[true_type]["fn"] += 1
                if pred_type in type_stats:
                    type_stats[pred_type]["fp"] += 1

    accuracy = correct / total if total > 0 else 0.0
    type_accuracy = correct_type / total if total > 0 else 0.0
    request_accuracy = correct_request / total if total > 0 else 0.0

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º precision, recall, f1 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    detailed_type_stats = {}
    for method, stats in type_stats.items():
        tp = stats["tp"]
        fp = stats["fp"]
        fn = stats["fn"]

        precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0
        recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0
        f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0.0

        detailed_type_stats[method] = {
            "tp": tp,
            "fp": fp,
            "fn": fn,
            "precision": precision,
            "recall": recall,
            "f1": f1,
        }

    return accuracy, {
        "total": total,
        "correct": correct,
        "correct_type": correct_type,
        "correct_request": correct_request,
        "type_accuracy": type_accuracy,
        "request_accuracy": request_accuracy,
        "errors": errors,
        "type_stats": detailed_type_stats,
    }


@click.command()
@click.option(
    "--pred",
    "pred_file",
    type=click.Path(exists=True, path_type=Path),
    default="data/processed/submission.csv",
    help="–ü—É—Ç—å –∫ predicted —Ñ–∞–π–ª—É (submission.csv)",
)
@click.option(
    "--true",
    "true_file",
    type=click.Path(exists=True, path_type=Path),
    default="data/processed/train.csv",
    help="–ü—É—Ç—å –∫ ground truth —Ñ–∞–π–ª—É",
)
@click.option(
    "--show-errors",
    type=int,
    default=0,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (0 = –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)",
)
@click.option(
    "--save-errors",
    type=click.Path(path_type=Path),
    default=None,
    help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ CSV —Ñ–∞–π–ª",
)
def main(pred_file: Path, true_file: Path, show_errors: int, save_errors: Optional[Path]) -> None:  # noqa: C901
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É accuracy –¥–ª—è submission —Ñ–∞–π–ª–∞"""

    click.echo("üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ accuracy...")
    click.echo(f"üìñ Predicted: {pred_file}")
    click.echo(f"üìñ Ground Truth: {true_file}")
    click.echo("=" * 70)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        predicted = load_csv(pred_file)
        ground_truth = load_csv(true_file)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}", err=True)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    accuracy, stats = calculate_accuracy(predicted, ground_truth)

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    click.echo("\nüéØ –û–°–ù–û–í–ù–ê–Ø –ú–ï–¢–†–ò–ö–ê (–∏–∑ evaluation.md):")
    click.echo(f"   Accuracy = {stats['correct']}/{stats['total']} = {accuracy:.4f} ({accuracy * 100:.2f}%)")

    click.echo("\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    click.echo(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:           {stats['total']}")
    click.echo(f"   –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö:     {stats['correct']} ({accuracy * 100:.2f}%)")
    click.echo(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π type:          {stats['correct_type']} ({stats['type_accuracy'] * 100:.2f}%)")
    click.echo(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π request:       {stats['correct_request']} ({stats['request_accuracy'] * 100:.2f}%)")
    click.echo(f"   –û—à–∏–±–æ–∫:                   {len(stats['errors'])}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å precision/recall –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    click.echo("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í:")
    click.echo(f"   {'Type':<10} {'Precision':<12} {'Recall':<12} {'F1-Score':<12}")
    click.echo(f"   {'-' * 46}")
    for method, method_stats in sorted(stats["type_stats"].items()):
        click.echo(
            f"   {method:<10} "
            f"{method_stats['precision']:.4f} ({method_stats['precision'] * 100:>5.1f}%)  "
            f"{method_stats['recall']:.4f} ({method_stats['recall'] * 100:>5.1f}%)  "
            f"{method_stats['f1']:.4f} ({method_stats['f1'] * 100:>5.1f}%)"
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
    if show_errors > 0 and stats["errors"]:
        click.echo(f"\n‚ùå –ü–†–ò–ú–ï–†–´ –û–®–ò–ë–û–ö (–ø–µ—Ä–≤—ã–µ {show_errors}):")
        click.echo("=" * 70)
        for i, error in enumerate(stats["errors"][:show_errors], 1):
            click.echo(f"\n   –û—à–∏–±–∫–∞ #{i} (uid: {error['uid']}):")
            if error["error"] == "missing":
                click.echo("   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ predicted —Ñ–∞–π–ª–µ")
                click.echo(f"   Expected: {error['true_type']} {error['true_request']}")
            else:
                if error["type_match"] == "no":
                    click.echo(f"   Type:    ‚úó {error['pred_type']} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {error['true_type']})")
                else:
                    click.echo(f"   Type:    ‚úì {error['true_type']}")

                if error["request_match"] == "no":
                    click.echo("   Request: ‚úó")
                    click.echo(f"     Predicted: {error['pred_request']}")
                    click.echo(f"     Expected:  {error['true_request']}")
                    click.echo(
                        f"     After norm: pred='{error.get('pred_request_norm', 'N/A')}' "
                        f"expected='{error.get('true_request_norm', 'N/A')}'"
                    )
                else:
                    click.echo(f"   Request: ‚úì {error['true_request']}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª
    if save_errors and stats["errors"]:
        save_errors = Path(save_errors)
        save_errors.parent.mkdir(parents=True, exist_ok=True)

        with open(save_errors, "w", encoding="utf-8", newline="") as f:
            fieldnames = [
                "uid",
                "error_type",
                "true_type",
                "pred_type",
                "true_request",
                "pred_request",
                "true_request_norm",
                "pred_request_norm",
                "type_match",
                "request_match",
            ]
            writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=";")
            writer.writeheader()

            for error in stats["errors"]:
                writer.writerow({
                    "uid": error["uid"],
                    "error_type": error["error"],
                    "true_type": error.get("true_type", ""),
                    "pred_type": error.get("pred_type", ""),
                    "true_request": error.get("true_request", ""),
                    "pred_request": error.get("pred_request", ""),
                    "true_request_norm": error.get("true_request_norm", ""),
                    "pred_request_norm": error.get("pred_request_norm", ""),
                    "type_match": error.get("type_match", ""),
                    "request_match": error.get("request_match", ""),
                })

        click.echo(f"\nüíæ –û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {save_errors}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    click.echo("\n" + "=" * 70)
    if accuracy == 1.0:
        click.echo("üéâ –ò–î–ï–ê–õ–¨–ù–û! –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Å–æ–≤–ø–∞–ª–∏ —Å —ç—Ç–∞–ª–æ–Ω–æ–º!")
    elif accuracy >= 0.9:
        click.echo("üåü –û–¢–õ–ò–ß–ù–û! –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å!")
    elif accuracy >= 0.7:
        click.echo("üëç –•–û–†–û–®–û! –ü—Ä–∏–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏.")
    elif accuracy >= 0.5:
        click.echo("üòê –°–†–ï–î–ù–ï. –ù—É–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∏ few-shot –ø—Ä–∏–º–µ—Ä—ã.")
    else:
        click.echo("üòû –ü–õ–û–•–û. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")


if __name__ == "__main__":
    main()
